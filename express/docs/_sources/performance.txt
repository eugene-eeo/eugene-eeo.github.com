Performance
===========

Tiny little things that you can do to speed up performance
in critical environments.

--------------------------
Install the uJSON library.
--------------------------

uJSON (https://pypi.python.org/pypi/ujson) is a JSON library
which acts as a drop-in replacement for the standard JSON
library for Python. It features lots of C bindings which speed
up the deserializing times significantly.

You may also want to consider these libraries which also
provide similar functionality:

* ``simplejson`` - https://pypi.python.org/pypi/simplejson/
* ``yajl`` - https://pypi.python.org/pypi/yajl
* ``msgpack`` - https://pypi.python.org/pypi/msgpack-python/

---------------------------------
Use a custom serialization format
---------------------------------

At times, you may not need the functionality that JSON offers-
so feel free to write your own serializer as express doesn't
restrict you to using JSON only. Just override the
``SERIALIZER`` configuration variable.

This makes your app faster (if your serialization protocol is
well designed) and also more space efficient depending on design,
and also cuts down bandwidth costs.

----------------------
Cache database queries
----------------------

This may seem unnecessary in development environments where the
database and the app is running in the same machine, but in
production environments where you need to deploy to platform as
a service providers like Heroku, it's best that you at the very
least, partially cache your database queries.

You can do so via the two different types of volatile caches that
express and Werkzeug provides:

* ``werkzeug.contrib.cache.SimpleCache`` - recommended for development
  environments but I use it for production environments and it works
  great.
* ``express.contrib.Cache`` - simple caching service which features
  infinite timeout and expiring cache keys. You may want to subclass
  it to suit your needs since it doesn't pack much features.
